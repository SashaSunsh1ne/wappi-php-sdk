<?php
/**
 * MessagesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Описание API для сервиса Wappi.pro
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * MessagesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MessagesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiSyncMessageDeletePost
     *
     * Удалить сообщение
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $message_id ID сообщения в формате **false_9001112233@c.us_4EB1F19C471F4A61CC5A** (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2002
     */
    public function apiSyncMessageDeletePost($profile_id, $message_id)
    {
        list($response) = $this->apiSyncMessageDeletePostWithHttpInfo($profile_id, $message_id);
        return $response;
    }

    /**
     * Operation apiSyncMessageDeletePostWithHttpInfo
     *
     * Удалить сообщение
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $message_id ID сообщения в формате **false_9001112233@c.us_4EB1F19C471F4A61CC5A** (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSyncMessageDeletePostWithHttpInfo($profile_id, $message_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->apiSyncMessageDeletePostRequest($profile_id, $message_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse4061',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse409',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiSyncMessageDeletePostAsync
     *
     * Удалить сообщение
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $message_id ID сообщения в формате **false_9001112233@c.us_4EB1F19C471F4A61CC5A** (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncMessageDeletePostAsync($profile_id, $message_id)
    {
        return $this->apiSyncMessageDeletePostAsyncWithHttpInfo($profile_id, $message_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSyncMessageDeletePostAsyncWithHttpInfo
     *
     * Удалить сообщение
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $message_id ID сообщения в формате **false_9001112233@c.us_4EB1F19C471F4A61CC5A** (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncMessageDeletePostAsyncWithHttpInfo($profile_id, $message_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->apiSyncMessageDeletePostRequest($profile_id, $message_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSyncMessageDeletePost'
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $message_id ID сообщения в формате **false_9001112233@c.us_4EB1F19C471F4A61CC5A** (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiSyncMessageDeletePostRequest($profile_id, $message_id)
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling apiSyncMessageDeletePost'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling apiSyncMessageDeletePost'
            );
        }

        $resourcePath = '/api/sync/message/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($profile_id !== null) {
            $queryParams['profile_id'] = ObjectSerializer::toQueryValue($profile_id, null);
        }
        // query params
        if ($message_id !== null) {
            $queryParams['message_id'] = ObjectSerializer::toQueryValue($message_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSyncMessageFileSendPost
     *
     * Отправить файл
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $recipient Получатель. Для ввода доступны форматы:   Chat ID - ID чата из списка сообщений.*Примеры: * ** 13475634251 @c.us ** для личных сообщений и ** 13475634251 - 1567456345 @g.us ** для группы;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны.Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     * @param  string $file file (optional)
     * @param  bool $create Создать новый чат, если его нет. (optional, default to true)
     * @param  string $file_type Тип файла. (optional, default to file)
     * @param  string $caption Подпись к файлу. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function apiSyncMessageFileSendPost($profile_id, $recipient, $file = null, $create = 'true', $file_type = 'file', $caption = null)
    {
        list($response) = $this->apiSyncMessageFileSendPostWithHttpInfo($profile_id, $recipient, $file, $create, $file_type, $caption);
        return $response;
    }

    /**
     * Operation apiSyncMessageFileSendPostWithHttpInfo
     *
     * Отправить файл
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $recipient Получатель. Для ввода доступны форматы:   Chat ID - ID чата из списка сообщений.*Примеры: * ** 13475634251 @c.us ** для личных сообщений и ** 13475634251 - 1567456345 @g.us ** для группы;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны.Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     * @param  string $file (optional)
     * @param  bool $create Создать новый чат, если его нет. (optional, default to true)
     * @param  string $file_type Тип файла. (optional, default to file)
     * @param  string $caption Подпись к файлу. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSyncMessageFileSendPostWithHttpInfo($profile_id, $recipient, $file = null, $create = 'true', $file_type = 'file', $caption = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->apiSyncMessageFileSendPostRequest($profile_id, $recipient, $file, $create, $file_type, $caption);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse4061',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse409',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiSyncMessageFileSendPostAsync
     *
     * Отправить файл
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $recipient Получатель. Для ввода доступны форматы:   Chat ID - ID чата из списка сообщений.*Примеры: * ** 13475634251 @c.us ** для личных сообщений и ** 13475634251 - 1567456345 @g.us ** для группы;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны.Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     * @param  string $file (optional)
     * @param  bool $create Создать новый чат, если его нет. (optional, default to true)
     * @param  string $file_type Тип файла. (optional, default to file)
     * @param  string $caption Подпись к файлу. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncMessageFileSendPostAsync($profile_id, $recipient, $file = null, $create = 'true', $file_type = 'file', $caption = null)
    {
        return $this->apiSyncMessageFileSendPostAsyncWithHttpInfo($profile_id, $recipient, $file, $create, $file_type, $caption)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSyncMessageFileSendPostAsyncWithHttpInfo
     *
     * Отправить файл
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $recipient Получатель. Для ввода доступны форматы:   Chat ID - ID чата из списка сообщений.*Примеры: * ** 13475634251 @c.us ** для личных сообщений и ** 13475634251 - 1567456345 @g.us ** для группы;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны.Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     * @param  string $file (optional)
     * @param  bool $create Создать новый чат, если его нет. (optional, default to true)
     * @param  string $file_type Тип файла. (optional, default to file)
     * @param  string $caption Подпись к файлу. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncMessageFileSendPostAsyncWithHttpInfo($profile_id, $recipient, $file = null, $create = 'true', $file_type = 'file', $caption = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->apiSyncMessageFileSendPostRequest($profile_id, $recipient, $file, $create, $file_type, $caption);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSyncMessageFileSendPost'
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $recipient Получатель. Для ввода доступны форматы:   Chat ID - ID чата из списка сообщений.*Примеры: * ** 13475634251 @c.us ** для личных сообщений и ** 13475634251 - 1567456345 @g.us ** для группы;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны.Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     * @param  string $file (optional)
     * @param  bool $create Создать новый чат, если его нет. (optional, default to true)
     * @param  string $file_type Тип файла. (optional, default to file)
     * @param  string $caption Подпись к файлу. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiSyncMessageFileSendPostRequest($profile_id, $recipient, $file = null, $create = 'true', $file_type = 'file', $caption = null)
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling apiSyncMessageFileSendPost'
            );
        }
        // verify the required parameter 'recipient' is set
        if ($recipient === null || (is_array($recipient) && count($recipient) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient when calling apiSyncMessageFileSendPost'
            );
        }

        $resourcePath = '/api/sync/message/file/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($profile_id !== null) {
            $queryParams['profile_id'] = ObjectSerializer::toQueryValue($profile_id, null);
        }
        // query params
        if ($recipient !== null) {
            $queryParams['recipient'] = ObjectSerializer::toQueryValue($recipient, 'string');
        }
        // query params
        if ($create !== null) {
            $queryParams['create'] = ObjectSerializer::toQueryValue($create, 'boolean');
        }
        // query params
        if ($file_type !== null) {
            $queryParams['file_type'] = ObjectSerializer::toQueryValue($file_type, 'string');
        }
        // query params
        if ($caption !== null) {
            $queryParams['caption'] = ObjectSerializer::toQueryValue($caption, null);
        }


        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSyncMessageReplyPost
     *
     * Ответить на сообщение
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $message_id ID сообщения в формате **false_9001112233@c.us_4EB1F19C471F4A61CC5A** (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function apiSyncMessageReplyPost($profile_id, $message_id)
    {
        list($response) = $this->apiSyncMessageReplyPostWithHttpInfo($profile_id, $message_id);
        return $response;
    }

    /**
     * Operation apiSyncMessageReplyPostWithHttpInfo
     *
     * Ответить на сообщение
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $message_id ID сообщения в формате **false_9001112233@c.us_4EB1F19C471F4A61CC5A** (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSyncMessageReplyPostWithHttpInfo($profile_id, $message_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->apiSyncMessageReplyPostRequest($profile_id, $message_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse4061',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse409',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiSyncMessageReplyPostAsync
     *
     * Ответить на сообщение
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $message_id ID сообщения в формате **false_9001112233@c.us_4EB1F19C471F4A61CC5A** (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncMessageReplyPostAsync($profile_id, $message_id)
    {
        return $this->apiSyncMessageReplyPostAsyncWithHttpInfo($profile_id, $message_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSyncMessageReplyPostAsyncWithHttpInfo
     *
     * Ответить на сообщение
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $message_id ID сообщения в формате **false_9001112233@c.us_4EB1F19C471F4A61CC5A** (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncMessageReplyPostAsyncWithHttpInfo($profile_id, $message_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->apiSyncMessageReplyPostRequest($profile_id, $message_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSyncMessageReplyPost'
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $message_id ID сообщения в формате **false_9001112233@c.us_4EB1F19C471F4A61CC5A** (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiSyncMessageReplyPostRequest($profile_id, $message_id)
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling apiSyncMessageReplyPost'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling apiSyncMessageReplyPost'
            );
        }

        $resourcePath = '/api/sync/message/reply';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($profile_id !== null) {
            $queryParams['profile_id'] = ObjectSerializer::toQueryValue($profile_id, null);
        }
        // query params
        if ($message_id !== null) {
            $queryParams['message_id'] = ObjectSerializer::toQueryValue($message_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSyncMessageSendPost
     *
     * Отправить сообщение
     *
     * @param  string $body Текст сообщения - любая строка, включая emoji. (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $recipient Получатель. Для ввода доступны форматы:   Chat ID - ID чата из списка сообщений.*Примеры: * ** 13475634251 @c.us ** для личных сообщений и ** 13475634251 - 1567456345 @g.us ** для группы;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны.Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     * @param  bool $create Создавать новый чат, если его нет. (optional, default to true)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function apiSyncMessageSendPost($body, $profile_id, $recipient, $create = 'true')
    {
        list($response) = $this->apiSyncMessageSendPostWithHttpInfo($body, $profile_id, $recipient, $create);
        return $response;
    }

    /**
     * Operation apiSyncMessageSendPostWithHttpInfo
     *
     * Отправить сообщение
     *
     * @param  string $body Текст сообщения - любая строка, включая emoji. (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $recipient Получатель. Для ввода доступны форматы:   Chat ID - ID чата из списка сообщений.*Примеры: * ** 13475634251 @c.us ** для личных сообщений и ** 13475634251 - 1567456345 @g.us ** для группы;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны.Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     * @param  bool $create Создавать новый чат, если его нет. (optional, default to true)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSyncMessageSendPostWithHttpInfo($body, $profile_id, $recipient, $create = 'true')
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->apiSyncMessageSendPostRequest($body, $profile_id, $recipient, $create);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse4061',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse409',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiSyncMessageSendPostAsync
     *
     * Отправить сообщение
     *
     * @param  string $body Текст сообщения - любая строка, включая emoji. (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $recipient Получатель. Для ввода доступны форматы:   Chat ID - ID чата из списка сообщений.*Примеры: * ** 13475634251 @c.us ** для личных сообщений и ** 13475634251 - 1567456345 @g.us ** для группы;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны.Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     * @param  bool $create Создавать новый чат, если его нет. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncMessageSendPostAsync($body, $profile_id, $recipient, $create = 'true')
    {
        return $this->apiSyncMessageSendPostAsyncWithHttpInfo($body, $profile_id, $recipient, $create)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSyncMessageSendPostAsyncWithHttpInfo
     *
     * Отправить сообщение
     *
     * @param  string $body Текст сообщения - любая строка, включая emoji. (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $recipient Получатель. Для ввода доступны форматы:   Chat ID - ID чата из списка сообщений.*Примеры: * ** 13475634251 @c.us ** для личных сообщений и ** 13475634251 - 1567456345 @g.us ** для группы;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны.Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     * @param  bool $create Создавать новый чат, если его нет. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncMessageSendPostAsyncWithHttpInfo($body, $profile_id, $recipient, $create = 'true')
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->apiSyncMessageSendPostRequest($body, $profile_id, $recipient, $create);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSyncMessageSendPost'
     *
     * @param  string $body Текст сообщения - любая строка, включая emoji. (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $recipient Получатель. Для ввода доступны форматы:   Chat ID - ID чата из списка сообщений.*Примеры: * ** 13475634251 @c.us ** для личных сообщений и ** 13475634251 - 1567456345 @g.us ** для группы;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны.Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     * @param  bool $create Создавать новый чат, если его нет. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiSyncMessageSendPostRequest($body, $profile_id, $recipient, $create = 'true')
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiSyncMessageSendPost'
            );
        }
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling apiSyncMessageSendPost'
            );
        }
        // verify the required parameter 'recipient' is set
        if ($recipient === null || (is_array($recipient) && count($recipient) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient when calling apiSyncMessageSendPost'
            );
        }

        $resourcePath = '/api/sync/message/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($profile_id !== null) {
            $queryParams['profile_id'] = ObjectSerializer::toQueryValue($profile_id, null);
        }
        // query params
        if ($recipient !== null) {
            $queryParams['recipient'] = ObjectSerializer::toQueryValue($recipient, 'string');
        }
        // query params
        if ($create !== null) {
            $queryParams['create'] = ObjectSerializer::toQueryValue($create, 'boolean');
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['text/plain']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSyncMessagesGetGet
     *
     * Получить сообщения
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата из списка сообщений. *Примеры:* **13475634251@c.us** для личных сообщений и **13475634251-1567456345@g.us** для группы. (required)
     * @param  bool $include_me Включать собственные сообщения. (optional, default to false)
     * @param  string $filters Все сообщения или только непрочитанные. (optional, default to all)
     * @param  bool $include_notifications Включать notifications. (optional, default to false)
     * @param  bool $load_all_msg Загружать все сообщения (ВНИМАНИЕ: работает только в асинхронном режиме). (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2007
     */
    public function apiSyncMessagesGetGet($profile_id, $chat_id, $include_me = 'false', $filters = 'all', $include_notifications = 'false', $load_all_msg = 'false')
    {
        list($response) = $this->apiSyncMessagesGetGetWithHttpInfo($profile_id, $chat_id, $include_me, $filters, $include_notifications, $load_all_msg);
        return $response;
    }

    /**
     * Operation apiSyncMessagesGetGetWithHttpInfo
     *
     * Получить сообщения
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата из списка сообщений. *Примеры:* **13475634251@c.us** для личных сообщений и **13475634251-1567456345@g.us** для группы. (required)
     * @param  bool $include_me Включать собственные сообщения. (optional, default to false)
     * @param  string $filters Все сообщения или только непрочитанные. (optional, default to all)
     * @param  bool $include_notifications Включать notifications. (optional, default to false)
     * @param  bool $load_all_msg Загружать все сообщения (ВНИМАНИЕ: работает только в асинхронном режиме). (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSyncMessagesGetGetWithHttpInfo($profile_id, $chat_id, $include_me = 'false', $filters = 'all', $include_notifications = 'false', $load_all_msg = 'false')
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->apiSyncMessagesGetGetRequest($profile_id, $chat_id, $include_me, $filters, $include_notifications, $load_all_msg);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2007',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse4062',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse409',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiSyncMessagesGetGetAsync
     *
     * Получить сообщения
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата из списка сообщений. *Примеры:* **13475634251@c.us** для личных сообщений и **13475634251-1567456345@g.us** для группы. (required)
     * @param  bool $include_me Включать собственные сообщения. (optional, default to false)
     * @param  string $filters Все сообщения или только непрочитанные. (optional, default to all)
     * @param  bool $include_notifications Включать notifications. (optional, default to false)
     * @param  bool $load_all_msg Загружать все сообщения (ВНИМАНИЕ: работает только в асинхронном режиме). (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncMessagesGetGetAsync($profile_id, $chat_id, $include_me = 'false', $filters = 'all', $include_notifications = 'false', $load_all_msg = 'false')
    {
        return $this->apiSyncMessagesGetGetAsyncWithHttpInfo($profile_id, $chat_id, $include_me, $filters, $include_notifications, $load_all_msg)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSyncMessagesGetGetAsyncWithHttpInfo
     *
     * Получить сообщения
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата из списка сообщений. *Примеры:* **13475634251@c.us** для личных сообщений и **13475634251-1567456345@g.us** для группы. (required)
     * @param  bool $include_me Включать собственные сообщения. (optional, default to false)
     * @param  string $filters Все сообщения или только непрочитанные. (optional, default to all)
     * @param  bool $include_notifications Включать notifications. (optional, default to false)
     * @param  bool $load_all_msg Загружать все сообщения (ВНИМАНИЕ: работает только в асинхронном режиме). (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncMessagesGetGetAsyncWithHttpInfo($profile_id, $chat_id, $include_me = 'false', $filters = 'all', $include_notifications = 'false', $load_all_msg = 'false')
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->apiSyncMessagesGetGetRequest($profile_id, $chat_id, $include_me, $filters, $include_notifications, $load_all_msg);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSyncMessagesGetGet'
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата из списка сообщений. *Примеры:* **13475634251@c.us** для личных сообщений и **13475634251-1567456345@g.us** для группы. (required)
     * @param  bool $include_me Включать собственные сообщения. (optional, default to false)
     * @param  string $filters Все сообщения или только непрочитанные. (optional, default to all)
     * @param  bool $include_notifications Включать notifications. (optional, default to false)
     * @param  bool $load_all_msg Загружать все сообщения (ВНИМАНИЕ: работает только в асинхронном режиме). (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiSyncMessagesGetGetRequest($profile_id, $chat_id, $include_me = 'false', $filters = 'all', $include_notifications = 'false', $load_all_msg = 'false')
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling apiSyncMessagesGetGet'
            );
        }
        // verify the required parameter 'chat_id' is set
        if ($chat_id === null || (is_array($chat_id) && count($chat_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chat_id when calling apiSyncMessagesGetGet'
            );
        }

        $resourcePath = '/api/sync/messages/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($profile_id !== null) {
            $queryParams['profile_id'] = ObjectSerializer::toQueryValue($profile_id, null);
        }
        // query params
        if ($chat_id !== null) {
            $queryParams['chat_id'] = ObjectSerializer::toQueryValue($chat_id, 'string');
        }
        // query params
        if ($include_me !== null) {
            $queryParams['include_me'] = ObjectSerializer::toQueryValue($include_me, null);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = ObjectSerializer::toQueryValue($filters, null);
        }
        // query params
        if ($include_notifications !== null) {
            $queryParams['include_notifications'] = ObjectSerializer::toQueryValue($include_notifications, null);
        }
        // query params
        if ($load_all_msg !== null) {
            $queryParams['load_all_msg'] = ObjectSerializer::toQueryValue($load_all_msg, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSyncMessagesUnreadGetGet
     *
     * Получить непрочитанные сообщения
     *
     * @param  string $profile_id Profile ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2008
     */
    public function apiSyncMessagesUnreadGetGet($profile_id)
    {
        list($response) = $this->apiSyncMessagesUnreadGetGetWithHttpInfo($profile_id);
        return $response;
    }

    /**
     * Operation apiSyncMessagesUnreadGetGetWithHttpInfo
     *
     * Получить непрочитанные сообщения
     *
     * @param  string $profile_id Profile ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSyncMessagesUnreadGetGetWithHttpInfo($profile_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2008';
        $request = $this->apiSyncMessagesUnreadGetGetRequest($profile_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2008',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse4062',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse409',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiSyncMessagesUnreadGetGetAsync
     *
     * Получить непрочитанные сообщения
     *
     * @param  string $profile_id Profile ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncMessagesUnreadGetGetAsync($profile_id)
    {
        return $this->apiSyncMessagesUnreadGetGetAsyncWithHttpInfo($profile_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSyncMessagesUnreadGetGetAsyncWithHttpInfo
     *
     * Получить непрочитанные сообщения
     *
     * @param  string $profile_id Profile ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncMessagesUnreadGetGetAsyncWithHttpInfo($profile_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2008';
        $request = $this->apiSyncMessagesUnreadGetGetRequest($profile_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSyncMessagesUnreadGetGet'
     *
     * @param  string $profile_id Profile ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiSyncMessagesUnreadGetGetRequest($profile_id)
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling apiSyncMessagesUnreadGetGet'
            );
        }

        $resourcePath = '/api/sync/messages/unread/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($profile_id !== null) {
            $queryParams['profile_id'] = ObjectSerializer::toQueryValue($profile_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
