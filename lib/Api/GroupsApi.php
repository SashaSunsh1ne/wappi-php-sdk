<?php
/**
 * GroupsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Описание API для сервиса Wappi.pro
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * GroupsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GroupsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiSyncGroupAdminDemotePost
     *
     * Убрать права администратора группы для контакта
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2002
     */
    public function apiSyncGroupAdminDemotePost($profile_id, $chat_id, $contact)
    {
        list($response) = $this->apiSyncGroupAdminDemotePostWithHttpInfo($profile_id, $chat_id, $contact);
        return $response;
    }

    /**
     * Operation apiSyncGroupAdminDemotePostWithHttpInfo
     *
     * Убрать права администратора группы для контакта
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSyncGroupAdminDemotePostWithHttpInfo($profile_id, $chat_id, $contact)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->apiSyncGroupAdminDemotePostRequest($profile_id, $chat_id, $contact);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse4051',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse405',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 407:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse406',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 408:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse4081',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiSyncGroupAdminDemotePostAsync
     *
     * Убрать права администратора группы для контакта
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncGroupAdminDemotePostAsync($profile_id, $chat_id, $contact)
    {
        return $this->apiSyncGroupAdminDemotePostAsyncWithHttpInfo($profile_id, $chat_id, $contact)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSyncGroupAdminDemotePostAsyncWithHttpInfo
     *
     * Убрать права администратора группы для контакта
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncGroupAdminDemotePostAsyncWithHttpInfo($profile_id, $chat_id, $contact)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->apiSyncGroupAdminDemotePostRequest($profile_id, $chat_id, $contact);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSyncGroupAdminDemotePost'
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiSyncGroupAdminDemotePostRequest($profile_id, $chat_id, $contact)
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling apiSyncGroupAdminDemotePost'
            );
        }
        // verify the required parameter 'chat_id' is set
        if ($chat_id === null || (is_array($chat_id) && count($chat_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chat_id when calling apiSyncGroupAdminDemotePost'
            );
        }
        // verify the required parameter 'contact' is set
        if ($contact === null || (is_array($contact) && count($contact) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact when calling apiSyncGroupAdminDemotePost'
            );
        }

        $resourcePath = '/api/sync/group/admin/demote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($profile_id !== null) {
            $queryParams['profile_id'] = ObjectSerializer::toQueryValue($profile_id, null);
        }
        // query params
        if ($chat_id !== null) {
            $queryParams['chat_id'] = ObjectSerializer::toQueryValue($chat_id, null);
        }
        // query params
        if ($contact !== null) {
            $queryParams['contact'] = ObjectSerializer::toQueryValue($contact, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSyncGroupAdminPromovePost
     *
     * Добавить права администратора группы контакту
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2002
     */
    public function apiSyncGroupAdminPromovePost($profile_id, $chat_id, $contact)
    {
        list($response) = $this->apiSyncGroupAdminPromovePostWithHttpInfo($profile_id, $chat_id, $contact);
        return $response;
    }

    /**
     * Operation apiSyncGroupAdminPromovePostWithHttpInfo
     *
     * Добавить права администратора группы контакту
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSyncGroupAdminPromovePostWithHttpInfo($profile_id, $chat_id, $contact)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->apiSyncGroupAdminPromovePostRequest($profile_id, $chat_id, $contact);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse4051',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse405',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 407:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse406',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 408:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse4081',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiSyncGroupAdminPromovePostAsync
     *
     * Добавить права администратора группы контакту
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncGroupAdminPromovePostAsync($profile_id, $chat_id, $contact)
    {
        return $this->apiSyncGroupAdminPromovePostAsyncWithHttpInfo($profile_id, $chat_id, $contact)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSyncGroupAdminPromovePostAsyncWithHttpInfo
     *
     * Добавить права администратора группы контакту
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncGroupAdminPromovePostAsyncWithHttpInfo($profile_id, $chat_id, $contact)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->apiSyncGroupAdminPromovePostRequest($profile_id, $chat_id, $contact);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSyncGroupAdminPromovePost'
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiSyncGroupAdminPromovePostRequest($profile_id, $chat_id, $contact)
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling apiSyncGroupAdminPromovePost'
            );
        }
        // verify the required parameter 'chat_id' is set
        if ($chat_id === null || (is_array($chat_id) && count($chat_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chat_id when calling apiSyncGroupAdminPromovePost'
            );
        }
        // verify the required parameter 'contact' is set
        if ($contact === null || (is_array($contact) && count($contact) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact when calling apiSyncGroupAdminPromovePost'
            );
        }

        $resourcePath = '/api/sync/group/admin/promove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($profile_id !== null) {
            $queryParams['profile_id'] = ObjectSerializer::toQueryValue($profile_id, null);
        }
        // query params
        if ($chat_id !== null) {
            $queryParams['chat_id'] = ObjectSerializer::toQueryValue($chat_id, null);
        }
        // query params
        if ($contact !== null) {
            $queryParams['contact'] = ObjectSerializer::toQueryValue($contact, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSyncGroupAdminsGetGet
     *
     * Получить список администраторов из группы
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20013
     */
    public function apiSyncGroupAdminsGetGet($profile_id, $chat_id)
    {
        list($response) = $this->apiSyncGroupAdminsGetGetWithHttpInfo($profile_id, $chat_id);
        return $response;
    }

    /**
     * Operation apiSyncGroupAdminsGetGetWithHttpInfo
     *
     * Получить список администраторов из группы
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20013, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSyncGroupAdminsGetGetWithHttpInfo($profile_id, $chat_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20013';
        $request = $this->apiSyncGroupAdminsGetGetRequest($profile_id, $chat_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20013',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse405',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse4064',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 407:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse406',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 408:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse408',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiSyncGroupAdminsGetGetAsync
     *
     * Получить список администраторов из группы
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncGroupAdminsGetGetAsync($profile_id, $chat_id)
    {
        return $this->apiSyncGroupAdminsGetGetAsyncWithHttpInfo($profile_id, $chat_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSyncGroupAdminsGetGetAsyncWithHttpInfo
     *
     * Получить список администраторов из группы
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncGroupAdminsGetGetAsyncWithHttpInfo($profile_id, $chat_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20013';
        $request = $this->apiSyncGroupAdminsGetGetRequest($profile_id, $chat_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSyncGroupAdminsGetGet'
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiSyncGroupAdminsGetGetRequest($profile_id, $chat_id)
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling apiSyncGroupAdminsGetGet'
            );
        }
        // verify the required parameter 'chat_id' is set
        if ($chat_id === null || (is_array($chat_id) && count($chat_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chat_id when calling apiSyncGroupAdminsGetGet'
            );
        }

        $resourcePath = '/api/sync/group/admins/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($profile_id !== null) {
            $queryParams['profile_id'] = ObjectSerializer::toQueryValue($profile_id, null);
        }
        // query params
        if ($chat_id !== null) {
            $queryParams['chat_id'] = ObjectSerializer::toQueryValue($chat_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSyncGroupCreatePost
     *
     * Создать новую группу
     *
     * @param  object $body Добавление массива контактов. Для ввода доступны форматы:

 ID контакта.*Пример: * ** 13475634251 @c.us ** ;

 Номер телефона.*Пример: * ** 79002224477 ** . Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены.

 *Пример массива: * 

  (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $name Название группы (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20012
     */
    public function apiSyncGroupCreatePost($body, $profile_id, $name)
    {
        list($response) = $this->apiSyncGroupCreatePostWithHttpInfo($body, $profile_id, $name);
        return $response;
    }

    /**
     * Operation apiSyncGroupCreatePostWithHttpInfo
     *
     * Создать новую группу
     *
     * @param  object $body Добавление массива контактов. Для ввода доступны форматы:

 ID контакта.*Пример: * ** 13475634251 @c.us ** ;

 Номер телефона.*Пример: * ** 79002224477 ** . Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены.

 *Пример массива: * 

  (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $name Название группы (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSyncGroupCreatePostWithHttpInfo($body, $profile_id, $name)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20012';
        $request = $this->apiSyncGroupCreatePostRequest($body, $profile_id, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse4063',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiSyncGroupCreatePostAsync
     *
     * Создать новую группу
     *
     * @param  object $body Добавление массива контактов. Для ввода доступны форматы:

 ID контакта.*Пример: * ** 13475634251 @c.us ** ;

 Номер телефона.*Пример: * ** 79002224477 ** . Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены.

 *Пример массива: * 

  (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $name Название группы (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncGroupCreatePostAsync($body, $profile_id, $name)
    {
        return $this->apiSyncGroupCreatePostAsyncWithHttpInfo($body, $profile_id, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSyncGroupCreatePostAsyncWithHttpInfo
     *
     * Создать новую группу
     *
     * @param  object $body Добавление массива контактов. Для ввода доступны форматы:

 ID контакта.*Пример: * ** 13475634251 @c.us ** ;

 Номер телефона.*Пример: * ** 79002224477 ** . Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены.

 *Пример массива: * 

  (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $name Название группы (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncGroupCreatePostAsyncWithHttpInfo($body, $profile_id, $name)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20012';
        $request = $this->apiSyncGroupCreatePostRequest($body, $profile_id, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSyncGroupCreatePost'
     *
     * @param  object $body Добавление массива контактов. Для ввода доступны форматы:

 ID контакта.*Пример: * ** 13475634251 @c.us ** ;

 Номер телефона.*Пример: * ** 79002224477 ** . Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены.

 *Пример массива: * 

  (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $name Название группы (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiSyncGroupCreatePostRequest($body, $profile_id, $name)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiSyncGroupCreatePost'
            );
        }
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling apiSyncGroupCreatePost'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling apiSyncGroupCreatePost'
            );
        }

        $resourcePath = '/api/sync/group/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($profile_id !== null) {
            $queryParams['profile_id'] = ObjectSerializer::toQueryValue($profile_id, null);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSyncGroupLeavePost
     *
     * Покинуть группу
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2002
     */
    public function apiSyncGroupLeavePost($profile_id, $chat_id)
    {
        list($response) = $this->apiSyncGroupLeavePostWithHttpInfo($profile_id, $chat_id);
        return $response;
    }

    /**
     * Operation apiSyncGroupLeavePostWithHttpInfo
     *
     * Покинуть группу
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSyncGroupLeavePostWithHttpInfo($profile_id, $chat_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->apiSyncGroupLeavePostRequest($profile_id, $chat_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse405',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse4064',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 407:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse406',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiSyncGroupLeavePostAsync
     *
     * Покинуть группу
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncGroupLeavePostAsync($profile_id, $chat_id)
    {
        return $this->apiSyncGroupLeavePostAsyncWithHttpInfo($profile_id, $chat_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSyncGroupLeavePostAsyncWithHttpInfo
     *
     * Покинуть группу
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncGroupLeavePostAsyncWithHttpInfo($profile_id, $chat_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->apiSyncGroupLeavePostRequest($profile_id, $chat_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSyncGroupLeavePost'
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiSyncGroupLeavePostRequest($profile_id, $chat_id)
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling apiSyncGroupLeavePost'
            );
        }
        // verify the required parameter 'chat_id' is set
        if ($chat_id === null || (is_array($chat_id) && count($chat_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chat_id when calling apiSyncGroupLeavePost'
            );
        }

        $resourcePath = '/api/sync/group/leave';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($profile_id !== null) {
            $queryParams['profile_id'] = ObjectSerializer::toQueryValue($profile_id, null);
        }
        // query params
        if ($chat_id !== null) {
            $queryParams['chat_id'] = ObjectSerializer::toQueryValue($chat_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSyncGroupParticipantAddPost
     *
     * Добавить контакт в группу
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2002
     */
    public function apiSyncGroupParticipantAddPost($profile_id, $chat_id, $contact)
    {
        list($response) = $this->apiSyncGroupParticipantAddPostWithHttpInfo($profile_id, $chat_id, $contact);
        return $response;
    }

    /**
     * Operation apiSyncGroupParticipantAddPostWithHttpInfo
     *
     * Добавить контакт в группу
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSyncGroupParticipantAddPostWithHttpInfo($profile_id, $chat_id, $contact)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->apiSyncGroupParticipantAddPostRequest($profile_id, $chat_id, $contact);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse4051',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse405',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 407:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse406',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 408:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse4081',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiSyncGroupParticipantAddPostAsync
     *
     * Добавить контакт в группу
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncGroupParticipantAddPostAsync($profile_id, $chat_id, $contact)
    {
        return $this->apiSyncGroupParticipantAddPostAsyncWithHttpInfo($profile_id, $chat_id, $contact)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSyncGroupParticipantAddPostAsyncWithHttpInfo
     *
     * Добавить контакт в группу
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncGroupParticipantAddPostAsyncWithHttpInfo($profile_id, $chat_id, $contact)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->apiSyncGroupParticipantAddPostRequest($profile_id, $chat_id, $contact);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSyncGroupParticipantAddPost'
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiSyncGroupParticipantAddPostRequest($profile_id, $chat_id, $contact)
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling apiSyncGroupParticipantAddPost'
            );
        }
        // verify the required parameter 'chat_id' is set
        if ($chat_id === null || (is_array($chat_id) && count($chat_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chat_id when calling apiSyncGroupParticipantAddPost'
            );
        }
        // verify the required parameter 'contact' is set
        if ($contact === null || (is_array($contact) && count($contact) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact when calling apiSyncGroupParticipantAddPost'
            );
        }

        $resourcePath = '/api/sync/group/participant/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($profile_id !== null) {
            $queryParams['profile_id'] = ObjectSerializer::toQueryValue($profile_id, null);
        }
        // query params
        if ($chat_id !== null) {
            $queryParams['chat_id'] = ObjectSerializer::toQueryValue($chat_id, null);
        }
        // query params
        if ($contact !== null) {
            $queryParams['contact'] = ObjectSerializer::toQueryValue($contact, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSyncGroupParticipantRemovePost
     *
     * Удалить контакт из группы
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2002
     */
    public function apiSyncGroupParticipantRemovePost($profile_id, $chat_id, $contact)
    {
        list($response) = $this->apiSyncGroupParticipantRemovePostWithHttpInfo($profile_id, $chat_id, $contact);
        return $response;
    }

    /**
     * Operation apiSyncGroupParticipantRemovePostWithHttpInfo
     *
     * Удалить контакт из группы
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSyncGroupParticipantRemovePostWithHttpInfo($profile_id, $chat_id, $contact)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->apiSyncGroupParticipantRemovePostRequest($profile_id, $chat_id, $contact);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse4051',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse405',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 407:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse406',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 408:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse4081',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiSyncGroupParticipantRemovePostAsync
     *
     * Удалить контакт из группы
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncGroupParticipantRemovePostAsync($profile_id, $chat_id, $contact)
    {
        return $this->apiSyncGroupParticipantRemovePostAsyncWithHttpInfo($profile_id, $chat_id, $contact)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSyncGroupParticipantRemovePostAsyncWithHttpInfo
     *
     * Удалить контакт из группы
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncGroupParticipantRemovePostAsyncWithHttpInfo($profile_id, $chat_id, $contact)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->apiSyncGroupParticipantRemovePostRequest($profile_id, $chat_id, $contact);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSyncGroupParticipantRemovePost'
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     * @param  string $contact Контакт. Для ввода доступны форматы:   ID контакта.*Пример: * ** 13475634251 @c.us ** ;   Номер телефона.*Пример: * ** 79002224477 ** .Номер должен начинаться с кода страны. Для России и Казахстана это всегда 7, затем 10 цифр.Сообщения на номера телефона с 8 не будут доставлены. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiSyncGroupParticipantRemovePostRequest($profile_id, $chat_id, $contact)
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling apiSyncGroupParticipantRemovePost'
            );
        }
        // verify the required parameter 'chat_id' is set
        if ($chat_id === null || (is_array($chat_id) && count($chat_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chat_id when calling apiSyncGroupParticipantRemovePost'
            );
        }
        // verify the required parameter 'contact' is set
        if ($contact === null || (is_array($contact) && count($contact) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact when calling apiSyncGroupParticipantRemovePost'
            );
        }

        $resourcePath = '/api/sync/group/participant/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($profile_id !== null) {
            $queryParams['profile_id'] = ObjectSerializer::toQueryValue($profile_id, null);
        }
        // query params
        if ($chat_id !== null) {
            $queryParams['chat_id'] = ObjectSerializer::toQueryValue($chat_id, null);
        }
        // query params
        if ($contact !== null) {
            $queryParams['contact'] = ObjectSerializer::toQueryValue($contact, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSyncGroupParticipantsGetGet
     *
     * Получить контакты из группы
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2004
     */
    public function apiSyncGroupParticipantsGetGet($profile_id, $chat_id)
    {
        list($response) = $this->apiSyncGroupParticipantsGetGetWithHttpInfo($profile_id, $chat_id);
        return $response;
    }

    /**
     * Operation apiSyncGroupParticipantsGetGetWithHttpInfo
     *
     * Получить контакты из группы
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSyncGroupParticipantsGetGetWithHttpInfo($profile_id, $chat_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->apiSyncGroupParticipantsGetGetRequest($profile_id, $chat_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse405',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse4064',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 407:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse406',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 408:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse408',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiSyncGroupParticipantsGetGetAsync
     *
     * Получить контакты из группы
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncGroupParticipantsGetGetAsync($profile_id, $chat_id)
    {
        return $this->apiSyncGroupParticipantsGetGetAsyncWithHttpInfo($profile_id, $chat_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSyncGroupParticipantsGetGetAsyncWithHttpInfo
     *
     * Получить контакты из группы
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSyncGroupParticipantsGetGetAsyncWithHttpInfo($profile_id, $chat_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->apiSyncGroupParticipantsGetGetRequest($profile_id, $chat_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSyncGroupParticipantsGetGet'
     *
     * @param  string $profile_id Profile ID (required)
     * @param  string $chat_id Chat ID - ID чата группы из списка сообщений. *Пример:* **13475634251-1567456345@g.us** для группы. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiSyncGroupParticipantsGetGetRequest($profile_id, $chat_id)
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling apiSyncGroupParticipantsGetGet'
            );
        }
        // verify the required parameter 'chat_id' is set
        if ($chat_id === null || (is_array($chat_id) && count($chat_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chat_id when calling apiSyncGroupParticipantsGetGet'
            );
        }

        $resourcePath = '/api/sync/group/participants/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($profile_id !== null) {
            $queryParams['profile_id'] = ObjectSerializer::toQueryValue($profile_id, null);
        }
        // query params
        if ($chat_id !== null) {
            $queryParams['chat_id'] = ObjectSerializer::toQueryValue($chat_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
